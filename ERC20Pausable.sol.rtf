{\rtf1\ansi\ansicpg1252\cocoartf2759
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 // SPDX-License-Identifier: MIT\
// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/ERC20Pausable.sol)\
\
pragma solidity ^0.8.0;\
\
import "../ERC20.sol";\
import "../../../security/Pausable.sol";\
\
/**\
 * @dev ERC20 token with pausable token transfers, minting and burning.\
 *\
 * Useful for scenarios such as preventing trades until the end of an evaluation\
 * period, or having an emergency switch for freezing all token transfers in the\
 * event of a large bug.\
 *\
 * IMPORTANT: This contract does not include public pause and unpause functions. In\
 * addition to inheriting this contract, you must define both functions, invoking the\
 * \{Pausable-_pause\} and \{Pausable-_unpause\} internal functions, with appropriate\
 * access control, e.g. using \{AccessControl\} or \{Ownable\}. Not doing so will\
 * make the contract unpausable.\
 */\
abstract contract ERC20Pausable is ERC20, Pausable \{\
    /**\
     * @dev See \{ERC20-_beforeTokenTransfer\}.\
     *\
     * Requirements:\
     *\
     * - the contract must not be paused.\
     */\
    function _beforeTokenTransfer(address from, address to, uint256 amount) internal virtual override \{\
        super._beforeTokenTransfer(from, to, amount);\
\
        require(!paused(), "ERC20Pausable: token transfer while paused");\
    \}\
\}}